#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ç–µ—Ä–µ–æ–ø–æ—Ç–æ–∫–∞ —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HailoInference.
"""

import cv2
import os
import numpy as np
from cam.camera_driver import StereoCameraSystem
from processing.hailo_detection import HailoInference, Processor


def choose_model():
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data/models.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ (.hef —Ñ–∞–π–ª).
    """
    models_dir = "data/models"
    model_files = [f for f in os.listdir(models_dir) if f.endswith(".hef")]

    if not model_files:
        print("–õ–æ–≥: –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", models_dir)
        exit(1)

    print("\nüìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
    for i, model in enumerate(model_files):
        print(f"  {i + 1}. {model}")

    while True:
        try:
            choice = int(input("\nüëâ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏: ")) - 1
            if 0 <= choice < len(model_files):
                return os.path.join(models_dir, model_files[choice])
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")


def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
    model_path = choose_model()
    inference = HailoInference(model_path)
    processor = Processor(inference, conf=0.5)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–µ—Ä–µ–æ–∫–∞–º–µ—Ä—ã
    stereo = StereoCameraSystem()
    stereo.start()

    print("üé• –ó–∞–ø—É—Å–∫ —Å—Ç–µ—Ä–µ–æ–ø–æ—Ç–æ–∫–∞. –ù–∞–∂–º–∏—Ç–µ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")

    try:
        while True:
            frame_left, frame_right = stereo.get_synchronized_frames()

            if frame_left is not None and frame_right is not None:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –ª–µ–≤–æ–≥–æ –∏ –ø—Ä–∞–≤–æ–≥–æ –∫–∞–¥—Ä–æ–≤
                segmentations = processor.process([frame_left, frame_right])

                # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å–∫–∏ –¥–ª—è –ª–µ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                left_masks = segmentations[0].get('absolute_masks', [])

                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –º–∞—Å–∫—É –¥–ª—è –ª–µ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                left_mask_overlay = np.zeros_like(frame_left)

                # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞—Å–∫–∏, –æ–±—ä–µ–¥–∏–Ω—è—è –∏—Ö —á–µ—Ä–µ–∑ np.maximum
                for mask in left_masks:
                    left_mask_overlay[:, :, 2] = np.maximum(left_mask_overlay[:, :, 2], mask * 255)

                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ª–µ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–∞–ª–æ–∂–µ–Ω–Ω–æ–π –º–∞—Å–∫–æ–π
                left_blended = cv2.addWeighted(frame_left, 0.7, left_mask_overlay, 0.3, 0)

                # –ü—Ä–∏–≤–æ–¥–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é Full HD (1920x1080)
                combined_resized = cv2.resize(left_blended, (1920, 1080))

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                cv2.imshow("Stereo Segmentation", combined_resized)

            # –í—ã—Ö–æ–¥ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–ª–∞–≤–∏—à–∏ 'q'
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

    except KeyboardInterrupt:
        print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞...")

    # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    stereo.stop()
    cv2.destroyAllWindows()
    print("‚úÖ –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω.")


if __name__ == '__main__':
    main()
