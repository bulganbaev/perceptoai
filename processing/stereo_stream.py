import cv2
import time
import numpy as np
from cam.camera_driver import CameraDriver
from processing.hailo_detection import HailoInference, Processor

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏
inf = HailoInference('data/models/yolov11s.hef', 'data/labels/coco.txt')
proc = Processor(inf, conf=0.5)

# –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–π –∫–∞–º–µ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–µ–≤–æ–π)
cam = CameraDriver(camera_id=0)
cam.start_camera()

print("üé• –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞. –ù–∞–∂–º–∏—Ç–µ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")

try:
    while True:
        frame = cam.get_frame()

        if frame is not None:
            # –ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ü–∏–∏
            detections = proc.process([frame])
            print(detections)

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ class=0 (–æ–±—ã—á–Ω–æ —ç—Ç–æ 'person' –≤ COCO)
            filtered_boxes = []
            filtered_scores = []
            filtered_classes = []

            result = detections[0]  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–∞–º–µ—Ä–∞)

            for i, class_id in enumerate(result['detection_classes']):
                if class_id == 0:  # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ class=0
                    filtered_boxes.append(result['absolute_boxes'][i])
                    filtered_scores.append(result['detection_scores'][i])
                    filtered_classes.append(class_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Ä–∏—Å—É–µ–º –±–æ–∫—Å—ã —Ç–æ–ª—å–∫–æ –¥–ª—è class=0
            result.update({
                'absolute_boxes': filtered_boxes,
                'detection_classes': filtered_classes,
                'detection_scores': filtered_scores
            })

            processed_frame = proc.label_loader.draw_boxes(result)

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–∫–Ω–∞
            cv2.namedWindow("Camera Stream", cv2.WINDOW_NORMAL)
            cv2.resizeWindow("Camera Stream", 1280, 720)
            cv2.imshow("Camera Stream", processed_frame)

        # –í—ã—Ö–æ–¥ –ø–æ 'q'
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

except KeyboardInterrupt:
    print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞...")

# –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –∫–∞–º–µ—Ä—ã
cam.stop_camera()
cv2.destroyAllWindows()
print("‚úÖ –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω.")
