import cv2
import time
import numpy as np
from cam.camera_driver import CameraDriver
from processing.hailo_detection import HailoInference, Processor

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥–ª—è –æ–±–µ–∏—Ö –∫–∞–º–µ—Ä
inf = HailoInference('data/models/yolov11s.hef', 'data/labels/coco.txt')
proc = Processor(inf, conf=0.5)

# –ó–∞–ø—É—Å–∫ —Å—Ç–µ—Ä–µ–æ–∫–∞–º–µ—Ä
cam_left = CameraDriver(camera_id=0)
cam_right = CameraDriver(camera_id=1)

cam_left.start_camera()
cam_right.start_camera()

print("üé• –ó–∞–ø—É—Å–∫ —Å—Ç–µ—Ä–µ–æ–ø–æ—Ç–æ–∫–∞. –ù–∞–∂–º–∏—Ç–µ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")

try:
    while True:
        frame_left = cam_left.get_frame()
        frame_right = cam_right.get_frame()

        if frame_left is not None and frame_right is not None:
            # –ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ü–∏–∏ –Ω–∞ –æ–±–æ–∏—Ö –∫–∞–¥—Ä–∞—Ö
            detections = proc.process([frame_left, frame_right])

            filtered_frames = []
            for i, frame in enumerate([frame_left, frame_right]):
                result = detections[i]

                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ class=0 (–æ–±—ã—á–Ω–æ —ç—Ç–æ 'person' –≤ COCO)
                filtered_boxes = []
                filtered_scores = []
                filtered_classes = []

                for j, class_id in enumerate(result['detection_classes']):
                    if class_id == 0:  # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ class=0
                        filtered_boxes.append(result['absolute_boxes'][j])
                        filtered_scores.append(result['detection_scores'][j])
                        filtered_classes.append(class_id)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Ä–∏—Å—É–µ–º –±–æ–∫—Å—ã —Ç–æ–ª—å–∫–æ –¥–ª—è class=0
                result.update({
                    'absolute_boxes': filtered_boxes,
                    'detection_classes': filtered_classes,
                    'detection_scores': filtered_scores
                })

                filtered_frames.append(proc.label_loader.draw_boxes(result))

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–∞–¥—Ä—ã
            combined_frame = cv2.hconcat(filtered_frames)

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–∫–Ω–∞
            cv2.namedWindow("Stereo Stream", cv2.WINDOW_NORMAL)
            cv2.resizeWindow("Stereo Stream", 1920, 1080)
            cv2.imshow("Stereo Stream", combined_frame)

        # –í—ã—Ö–æ–¥ –ø–æ 'q'
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

except KeyboardInterrupt:
    print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞...")

# –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –∫–∞–º–µ—Ä
cam_left.stop_camera()
cam_right.stop_camera()
cv2.destroyAllWindows()
print("‚úÖ –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω.")
