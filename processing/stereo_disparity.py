import cv2
import os
import numpy as np
from collections import deque
from scipy.optimize import linear_sum_assignment
from cam.camera_driver import StereoCameraSystem
from processing.hailo_detection import HailoInference, Processor

# === 1. –ó–ê–ì–†–£–ó–ö–ê –ö–ê–õ–ò–ë–†–û–í–ö–ò ===
calib_data = np.load("data/calibration/calibration_data.npz")
mtxL, distL = calib_data["mtxL"], calib_data["distL"]
mtxR, distR = calib_data["mtxR"], calib_data["distR"]
R, T = calib_data["R"], calib_data["T"]

BASELINE = abs(T[0][0])  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–∞–º–µ—Ä–∞–º–∏ (–º–º)
FOCAL_LENGTH = mtxL[0, 0]  # –§–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–ø–∏–∫—Å–µ–ª–∏)

# === 2. –§–ò–õ–¨–¢–† –î–õ–Ø –°–¢–ê–ë–ò–õ–¨–ù–û–ì–û DEPTH ===
depth_history = {}
DEPTH_FILTER_SIZE = 5  # –†–∞–∑–º–µ—Ä —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞


# === 3. –§–£–ù–ö–¶–ò–ò ===

def compute_disparity_map(left_image, right_image):
    """
    –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–∏—Å–ø–∞—Ä–∏—Ç–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º StereoSGBM.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        left_image  : –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ª–µ–≤–æ–π –∫–∞–º–µ—Ä—ã (BGR)
        right_image : –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–æ–π –∫–∞–º–µ—Ä—ã (BGR)

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        disparity : –ö–∞—Ä—Ç–∞ –¥–∏—Å–ø–∞—Ä–∏—Ç–µ—Ç–∞ (—Ç–∏–ø float32)
    """
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ
    gray_left = cv2.cvtColor(left_image, cv2.COLOR_BGR2GRAY)
    gray_right = cv2.cvtColor(right_image, cv2.COLOR_BGR2GRAY)

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã StereoSGBM (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
    min_disp = 0
    num_disp = 16 * 8  # –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–æ 16
    block_size = 5
    stereo = cv2.StereoSGBM_create(
        minDisparity=min_disp,
        numDisparities=num_disp,
        blockSize=block_size,
        P1=8 * 3 * block_size ** 2,
        P2=32 * 3 * block_size ** 2,
        disp12MaxDiff=1,
        uniquenessRatio=10,
        speckleWindowSize=100,
        speckleRange=32
    )

    disparity = stereo.compute(gray_left, gray_right).astype(np.float32) / 16.0
    return disparity


def filter_people(results):
    """
    –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ü–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.
    –ó–¥–µ—Å—å –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã —Å class_id==2 (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞—à–∏–Ω–∞).
    –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    """
    filtered_boxes = []
    filtered_scores = []
    filtered_classes = []

    for i, class_id in enumerate(results['detection_classes']):
        if class_id == 2:
            filtered_boxes.append(results['absolute_boxes'][i])
            filtered_scores.append(results['detection_scores'][i])
            filtered_classes.append(class_id)

    results.update({
        'absolute_boxes': filtered_boxes,
        'detection_classes': filtered_classes,
        'detection_scores': filtered_scores
    })
    return results


def compute_depth(left_results, right_results, matches, disparity_map):
    """
    –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–∞—Ä—Ç—ã –¥–∏—Å–ø–∞—Ä–∏—Ç–µ—Ç–∞.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        left_results  : –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥–ª—è –ª–µ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        right_results : –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∞–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        matches       : –°–ø–∏—Å–æ–∫ –ø–∞—Ä –∏–Ω–¥–µ–∫—Å–æ–≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö bbox (Hungarian Algorithm)
        disparity_map : –ö–∞—Ä—Ç–∞ –¥–∏—Å–ø–∞—Ä–∏—Ç–µ—Ç–∞, –≤—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è –∏–∑ —Å—Ç–µ—Ä–µ–æ–ø–∞—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (X, Y, final_depth, min_depth, max_depth) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.
    """
    global depth_history
    depths = {}

    for left_idx, right_idx in matches:
        left_box = left_results['absolute_boxes'][left_idx]
        right_box = right_results['absolute_boxes'][right_idx]

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–µ–≤–æ–≥–æ bbox –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –¥–∏—Å–ø–∞—Ä–∏—Ç–µ—Ç–∞
        x1, y1, x2, y2 = left_box
        h, w = disparity_map.shape
        x1, y1 = max(0, x1), max(0, y1)
        x2, y2 = min(w, x2), min(h, y2)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–∏—Å–ø–∞—Ä–∏—Ç–µ—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö bbox
        box_disp = disparity_map[y1:y2, x1:x2]
        valid_disp = box_disp[box_disp > 0]  # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è

        if valid_disp.size > 0:
            median_disp = np.median(valid_disp)
            min_disp = np.min(valid_disp)
            max_disp = np.max(valid_disp)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ bbox, –≤—ã—á–∏—Å–ª—è–µ–º –¥–∏—Å–ø–∞—Ä–∏—Ç–µ—Ç –ø–æ —Ü–µ–Ω—Ç—Ä–∞–º bbox
            center_L_x = (left_box[1] + left_box[3]) // 2
            center_R_x = (right_box[1] + right_box[3]) // 2
            median_disp = max(1, abs(center_L_x - center_R_x))
            min_disp = median_disp
            max_disp = median_disp

        # –í—ã—á–∏—Å–ª—è–µ–º –≥–ª—É–±–∏–Ω—É: Depth = (focal_length * baseline) / disparity
        raw_depth = (FOCAL_LENGTH * BASELINE) / median_disp  # –ì–ª—É–±–∏–Ω–∞ –≤ –º–º

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥–ª—É–±–∏–Ω—ã
        obj_id = left_idx
        if obj_id not in depth_history:
            depth_history[obj_id] = deque(maxlen=DEPTH_FILTER_SIZE)
        depth_history[obj_id].append(raw_depth)
        final_depth = np.median(depth_history[obj_id])

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ bbox –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        center_x = (x1 + x2) // 2
        center_y = (y1 + y2) // 2
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≥–ª—É–±–∏–Ω—ã (–ø—Ä–∏ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–µ min/max –ø–æ –¥–∏—Å–ø–∞—Ä–∏—Ç–µ—Ç—É)
        depth_min = (FOCAL_LENGTH * BASELINE) / max_disp
        depth_max = (FOCAL_LENGTH * BASELINE) / min_disp

        depths[obj_id] = (center_x, center_y, final_depth, depth_min, depth_max)

    return list(depths.values())


def match_boxes(left_results, right_results):
    """
    –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ bbox –º–µ–∂–¥—É –ª–µ–≤—ã–º –∏ –ø—Ä–∞–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ø–æ X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –•–∞–Ω–≥–∞—Ä–∏–∞–Ω–∞.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –°–ø–∏—Å–æ–∫ –ø–∞—Ä –∏–Ω–¥–µ–∫—Å–æ–≤ (–ª–µ–≤—ã–π, –ø—Ä–∞–≤—ã–π)
    """
    left_boxes, right_boxes = left_results["absolute_boxes"], right_results["absolute_boxes"]
    if not left_boxes or not right_boxes:
        return []

    left_centers = np.array([(box[1] + box[3]) // 2 for box in left_boxes])
    right_centers = np.array([(box[1] + box[3]) // 2 for box in right_boxes])

    cost_matrix = np.abs(left_centers[:, None] - right_centers[None, :])
    left_indices, right_indices = linear_sum_assignment(cost_matrix)
    return [(l, r) for l, r in zip(left_indices, right_indices)]


def draw_boxes(image, results):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ bounding boxes –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.
    """
    for (y1, x1, y2, x2), score in zip(results['absolute_boxes'], results['detection_scores']):
        label = f"Car ({score:.2f})"
        cv2.rectangle(image, (x1, y1), (x2, y2), (0, 255, 0), 2)
        cv2.putText(image, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)
    return image


def draw_depth(image, depth_results):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–ª—É–±–∏–Ω–µ (—Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω) –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.
    """
    for x, y, d, d_min, d_max in depth_results:
        text = f"{d:.1f}mm ({d_min:.1f}-{d_max:.1f}mm)"
        cv2.putText(image, text, (x, y), cv2.FONT_HERSHEY_SIMPLEX, 1.0, (255, 255, 255), 2)
    return image


def choose_model():
    """
    –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏.
    """
    models_dir = "data/models"
    model_files = [f for f in os.listdir(models_dir) if f.endswith(".hef")]

    print("\nüìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
    for i, model in enumerate(model_files):
        print(f"  {i + 1}. {model}")

    while True:
        try:
            choice = int(input("\nüëâ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏: ")) - 1
            if 0 <= choice < len(model_files):
                return os.path.join(models_dir, model_files[choice])
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")


# === 4. –ó–ê–ü–£–°–ö –ö–ê–ú–ï–† –ò –î–ï–¢–ï–ö–¶–ò–ò ===
model_path = choose_model()
inf = HailoInference(model_path)
proc = Processor(inf, conf=0.5)
stereo = StereoCameraSystem()
stereo.start()

print("üé• –ó–∞–ø—É—Å–∫ —Å—Ç–µ—Ä–µ–æ–ø–æ—Ç–æ–∫–∞. –ù–∞–∂–º–∏—Ç–µ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
try:
    while True:
        frame_left, frame_right = stereo.get_synchronized_frames()
        if frame_left is not None and frame_right is not None:
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–∞—Ä—Ç—É –¥–∏—Å–ø–∞—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è —Å—Ç–µ—Ä–µ–æ–ø–∞—Ä—ã
            disparity_map = compute_disparity_map(frame_left, frame_right)

            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –æ–±–æ–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
            detections = proc.process([frame_left, frame_right])
            result_left = filter_people(detections[0])
            result_right = filter_people(detections[1])

            # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º bbox –º–µ–∂–¥—É –ª–µ–≤—ã–º –∏ –ø—Ä–∞–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            matches = match_boxes(result_left, result_right)

            # –í—ã—á–∏—Å–ª—è–µ–º –≥–ª—É–±–∏–Ω—É –æ–±—ä–µ–∫—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–∞—Ä—Ç—É –¥–∏—Å–ø–∞—Ä–∏—Ç–µ—Ç–∞
            depth_results = compute_depth(result_left, result_right, matches, disparity_map)

            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ bounding boxes –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–ª—É–±–∏–Ω–µ
            processed_left = draw_boxes(frame_left, result_left)
            processed_left = draw_depth(processed_left, depth_results)

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ª–µ–≤—ã–π –∏ –ø—Ä–∞–≤—ã–π –∫–∞–¥—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            combined = cv2.hconcat([processed_left, frame_right])
            cv2.namedWindow("Stereo Depth", cv2.WINDOW_NORMAL)
            cv2.resizeWindow("Stereo Depth", 1920, 1080)
            cv2.imshow("Stereo Depth", combined)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
except KeyboardInterrupt:
    print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞...")

stereo.stop()
cv2.destroyAllWindows()
print("‚úÖ –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω.")
