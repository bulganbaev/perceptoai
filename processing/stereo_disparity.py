import cv2
import os
import numpy as np
from collections import deque
from scipy.optimize import linear_sum_assignment  # Hungarian Algorithm
from cam.camera_driver import CameraDriver
from processing.hailo_detection import HailoInference, Processor

# === 1. –ó–ê–ì–†–£–ó–ö–ê –ü–ê–†–ê–ú–ï–¢–†–û–í –ö–ê–õ–ò–ë–†–û–í–ö–ò ===
calib_data = np.load("data/calibration/calibration_data.npz")

mtxL = calib_data["mtxL"]
distL = calib_data["distL"]
mtxR = calib_data["mtxR"]
distR = calib_data["distR"]
R = calib_data["R"]
T = calib_data["T"]

BASELINE = abs(T[0][0])  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–∞–º–µ—Ä–∞–º–∏ (–º–º)
FOCAL_LENGTH = mtxL[0, 0]  # –§–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∏–∫—Å–µ–ª—è—Ö

print(f"üîß –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: baseline={BASELINE:.2f}mm, focal={FOCAL_LENGTH:.2f}px")
models_dir = "data/models"

# === 2. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –§–ò–õ–¨–¢–†–ê –ì–õ–£–ë–ò–ù–´ ===
depth_history = {}  # –ö—ç—à –≥–ª—É–±–∏–Ω—ã –¥–ª—è –º–µ–¥–∏–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
DEPTH_FILTER_SIZE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–ª—è –º–µ–¥–∏–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞


def undistort_and_rectify(frame, mtx, dist):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å–∫–∞–∂–µ–Ω–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."""
    h, w = frame.shape[:2]
    new_mtx, roi = cv2.getOptimalNewCameraMatrix(mtx, dist, (w, h), 1, (w, h))
    return cv2.undistort(frame, mtx, dist, None, new_mtx)


def match_boxes(left_results, right_results):
    """–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –º–µ–∂–¥—É –ª–µ–≤—ã–º –∏ –ø—Ä–∞–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º."""
    left_boxes = left_results["absolute_boxes"]
    right_boxes = right_results["absolute_boxes"]

    if not left_boxes or not right_boxes:
        return []

    # –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä—ã bounding box'–æ–≤
    left_centers = np.array([(x1 + x2) // 2 for (_, x1, _, x2) in left_boxes])
    right_centers = np.array([(x1 + x2) // 2 for (_, x1, _, x2) in right_boxes])

    # –°–æ–∑–¥–∞—ë–º –º–∞—Ç—Ä–∏—Ü—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
    cost_matrix = np.abs(left_centers[:, None] - right_centers[None, :])

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –í–µ–Ω–≥–µ—Ä–∞ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    left_indices, right_indices = linear_sum_assignment(cost_matrix)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π (–∏–Ω–¥–µ–∫—Å_–≤_–ª–µ–≤–æ–º, –∏–Ω–¥–µ–∫—Å_–≤_–ø—Ä–∞–≤–æ–º)
    matches = [(l, r) for l, r in zip(left_indices, right_indices)]

    return matches


def compute_depth(left_results, right_results, matches):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ bounding box'–∞."""
    global depth_history
    depths = {}
    left_boxes = left_results['absolute_boxes']
    right_boxes = right_results['absolute_boxes']

    for left_idx, right_idx in matches:
        left_box = left_boxes[left_idx]
        right_box = right_boxes[right_idx]

        left_center_x = (left_box[1] + left_box[3]) // 2
        right_center_x = (right_box[1] + right_box[3]) // 2

        disparity = max(1, abs(left_center_x - right_center_x))  # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
        depth = (FOCAL_LENGTH * BASELINE) / disparity

        # üìå –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –º–µ–¥–∏–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        obj_id = left_idx  # –û–¥–∏–Ω box = –æ–¥–∏–Ω depth
        if obj_id not in depth_history:
            depth_history[obj_id] = deque(maxlen=DEPTH_FILTER_SIZE)

        depth_history[obj_id].append(depth)
        filtered_depth = np.median(depth_history[obj_id])  # –ú–µ–¥–∏–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

        # ‚úÖ –¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π bounding box –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã
        depths[obj_id] = (left_box[1], left_box[0], filtered_depth)

    return list(depths.values())  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π



def draw_boxes(image, results, color=(0, 255, 0)):
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ bbox."""
    for (y1, x1, y2, x2), class_id, score in zip(results['absolute_boxes'], results['detection_classes'],
                                                 results['detection_scores']):
        if class_id == 0:
            label = f"Person ({score:.2f})"
            cv2.rectangle(image, (x1, y1), (x2, y2), color, 2)
            cv2.putText(image, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)
    return image


def draw_depth(image, depth_results):
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–µ—Ç–∫–∏ –≥–ª—É–±–∏–Ω—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."""
    for x, y, d in depth_results:
        cv2.putText(image, f"Depth: {d:.1f} mm", (x, y), cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 255, 255), 3)
    return image


def choose_model():
    """–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º."""
    model_files = [f for f in os.listdir(models_dir) if f.endswith(".hef")]

    print("\nüìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
    for i, model in enumerate(model_files):
        print(f"  {i + 1}. {model}")

    while True:
        try:
            choice = int(input("\nüëâ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏: ")) - 1
            if 0 <= choice < len(model_files):
                return os.path.join(models_dir, model_files[choice])
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")


# === 3. –ó–ê–ü–£–°–ö –ö–ê–ú–ï–† –ò –î–ï–¢–ï–ö–¶–ò–ò ===
model_path = choose_model()
print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å –º–æ–¥–µ–ª—å—é: {model_path}")

inf = HailoInference(model_path)
proc = Processor(inf, conf=0.5)

cam_left = CameraDriver(camera_id=0)
cam_right = CameraDriver(camera_id=1)
cam_left.start_camera()
cam_right.start_camera()

print("üé• –ó–∞–ø—É—Å–∫ —Å—Ç–µ—Ä–µ–æ–ø–æ—Ç–æ–∫–∞ —Å —Ä–∞—Å—á–µ—Ç–æ–º –≥–ª—É–±–∏–Ω—ã. –ù–∞–∂–º–∏—Ç–µ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")

try:
    while True:
        frame_left = cam_left.get_frame()
        frame_right = cam_right.get_frame()

        if frame_left is not None and frame_right is not None:
            frame_left = undistort_and_rectify(frame_left, mtxL, distL)
            frame_right = undistort_and_rectify(frame_right, mtxR, distR)

            detections = proc.process([frame_left, frame_right])
            result_left, result_right = detections[0], detections[1]

            matches = match_boxes(result_left, result_right)
            depth_results = compute_depth(result_left, result_right, matches)

            processed_left = draw_boxes(frame_left, result_left, color=(0, 255, 0))
            processed_right = draw_boxes(frame_right, result_right, color=(255, 0, 0))

            processed_left = draw_depth(processed_left, depth_results)
            processed_right = draw_depth(processed_right, depth_results)

            combined = cv2.hconcat([processed_left, processed_right])
            cv2.namedWindow("Stereo Depth", cv2.WINDOW_NORMAL)
            cv2.resizeWindow("Stereo Depth", 1920, 1080)
            cv2.imshow("Stereo Depth", combined)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

except KeyboardInterrupt:
    print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞...")

cam_left.stop_camera()
cam_right.stop_camera()
cv2.destroyAllWindows()
print("‚úÖ –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω.")
