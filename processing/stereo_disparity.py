import cv2
import os
import numpy as np
from collections import deque
from scipy.optimize import linear_sum_assignment
from cam.camera_driver import StereoCameraSystem
from processing.hailo_detection import HailoInference, Processor

# === 1. –ó–ê–ì–†–£–ó–ö–ê –ö–ê–õ–ò–ë–†–û–í–ö–ò ===
calib_data = np.load("data/calibration/calibration_data.npz")
mtxL, distL = calib_data["mtxL"], calib_data["distL"]
mtxR, distR = calib_data["mtxR"], calib_data["distR"]
R, T = calib_data["R"], calib_data["T"]

BASELINE = abs(T[0][0])  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–∞–º–µ—Ä–∞–º–∏ (–º–º)

# === 2. –§–ò–õ–¨–¢–† –î–õ–Ø –°–¢–ê–ë–ò–õ–¨–ù–û–ì–û DEPTH ===
depth_history = {}
DEPTH_FILTER_SIZE = 5  # –†–∞–∑–º–µ—Ä —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞


# === 3. –§–£–ù–ö–¶–ò–ò ===

def filter_people(results):
    """
    –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ü–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.
    –ó–¥–µ—Å—å –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã —Å class_id==2 (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞—à–∏–Ω–∞).
    –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    """
    filtered_boxes = []
    filtered_scores = []
    filtered_classes = []
    for i, class_id in enumerate(results['detection_classes']):
        if class_id == 0:
            filtered_boxes.append(results['absolute_boxes'][i])
            filtered_scores.append(results['detection_scores'][i])
            filtered_classes.append(class_id)
    if not filtered_boxes:
        print("–õ–æ–≥: –í —Ç–µ–∫—É—â–µ–º –∫–∞–¥—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ –º–∞—à–∏–Ω—ã (class_id==2).")
    results.update({
        'absolute_boxes': filtered_boxes,
        'detection_classes': filtered_classes,
        'detection_scores': filtered_scores
    })
    return results


def compute_depth_rectified(left_results, right_results, matches, R1, R2, P1, P2):
    """
    –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∫—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ü–µ–Ω—Ç—Ä–∞ bbox.
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è —Ü–µ–Ω—Ç—Ä bbox, –∑–∞—Ç–µ–º —Ç–æ—á–∫–∏ —Ä–µ–∫—Ç–∏—Ñ–∏—Ü–∏—Ä—É—é—Ç—Å—è,
    –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è disparity –∫–∞–∫ —Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ X –º–µ–∂–¥—É —Ä–µ–∫—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        left_results  : –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥–ª—è –ª–µ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        right_results : –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∞–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        matches       : –°–ø–∏—Å–æ–∫ –ø–∞—Ä –∏–Ω–¥–µ–∫—Å–æ–≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö bbox.
        R1, R2        : –†–µ–∫—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç—Ä–∏—Ü—ã –¥–ª—è –ª–µ–≤–æ–≥–æ –∏ –ø—Ä–∞–≤–æ–≥–æ –∫–∞–º–µ—Ä.
        P1, P2        : –ù–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç—Ä–∏—Ü—ã –¥–ª—è –ª–µ–≤–æ–≥–æ –∏ –ø—Ä–∞–≤–æ–≥–æ –∫–∞–º–µ—Ä.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (center_x, center_y, final_depth) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.
    """
    global depth_history
    depths = {}
    if not matches:
        print("–õ–æ–≥: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã –º–µ–∂–¥—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.")
    for left_idx, right_idx in matches:
        left_box = left_results['absolute_boxes'][left_idx]
        right_box = right_results['absolute_boxes'][right_idx]

        # –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä—ã bbox. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç bbox: [y1, x1, y2, x2]
        center_left_x = (left_box[1] + left_box[3]) // 2
        center_left_y = (left_box[0] + left_box[2]) // 2
        center_right_x = (right_box[1] + right_box[3]) // 2
        center_right_y = (right_box[0] + right_box[2]) // 2

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –¥–ª—è —Ä–µ–∫—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        pt_left = np.array([[[center_left_x, center_left_y]]], dtype=np.float32)
        pt_right = np.array([[[center_right_x, center_right_y]]], dtype=np.float32)

        # –†–µ–∫—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ—á–µ–∫
        rect_left = cv2.undistortPoints(pt_left, mtxL, distL, R=R1, P=P1)
        rect_right = cv2.undistortPoints(pt_right, mtxR, distR, R=R2, P=P2)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã X —Ä–µ–∫—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
        x_left = rect_left[0, 0, 0]
        x_right = rect_right[0, 0, 0]

        # –í—ã—á–∏—Å–ª—è–µ–º disparity
        disparity = abs(x_left - x_right)
        if disparity < 1:
            disparity = 1  # –∏–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏–∑ P1 (—ç–ª–µ–º–µ–Ω—Ç [0,0])
        focal_rect = P1[0, 0]
        # –í—ã—á–∏—Å–ª—è–µ–º –≥–ª—É–±–∏–Ω—É: Depth = (focal * BASELINE) / disparity
        raw_depth = (focal_rect * BASELINE) / disparity

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≥–ª—É–±–∏–Ω—ã –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
        obj_id = left_idx
        if obj_id not in depth_history:
            depth_history[obj_id] = deque(maxlen=DEPTH_FILTER_SIZE)
        depth_history[obj_id].append(raw_depth)
        final_depth = np.median(depth_history[obj_id])

        depths[obj_id] = (center_left_x, center_left_y, final_depth)
    if not depths:
        print("–õ–æ–≥: –ì–ª—É–±–∏–Ω–∞ –Ω–µ –≤—ã—á–∏—Å–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ—Ç.")
    return list(depths.values())


def match_boxes(left_results, right_results):
    """
    –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ bbox –º–µ–∂–¥—É –ª–µ–≤—ã–º –∏ –ø—Ä–∞–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ø–æ X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –•–∞–Ω–≥–∞—Ä–∏–∞–Ω–∞.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –°–ø–∏—Å–æ–∫ –ø–∞—Ä –∏–Ω–¥–µ–∫—Å–æ–≤ (–ª–µ–≤—ã–π, –ø—Ä–∞–≤—ã–π).
    """
    left_boxes, right_boxes = left_results["absolute_boxes"], right_results["absolute_boxes"]
    if not left_boxes:
        print("–õ–æ–≥: –í –ª–µ–≤–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ bounding boxes.")
    if not right_boxes:
        print("–õ–æ–≥: –í –ø—Ä–∞–≤–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ bounding boxes.")
    if not left_boxes or not right_boxes:
        return []

    left_centers = np.array([(box[1] + box[3]) // 2 for box in left_boxes])
    right_centers = np.array([(box[1] + box[3]) // 2 for box in right_boxes])

    cost_matrix = np.abs(left_centers[:, None] - right_centers[None, :])
    left_indices, right_indices = linear_sum_assignment(cost_matrix)
    return [(l, r) for l, r in zip(left_indices, right_indices)]


def draw_boxes(image, results):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ bounding boxes –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.
    """
    for (y1, x1, y2, x2), score in zip(results['absolute_boxes'], results['detection_scores']):
        label = f"Car ({score:.2f})"
        cv2.rectangle(image, (x1, y1), (x2, y2), (0, 255, 0), 2)
        cv2.putText(image, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)
    return image


def draw_depth(image, depth_results):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–ª—É–±–∏–Ω–µ (—Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ) –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.
    """
    for x, y, depth in depth_results:
        text = f"{depth:.1f} mm"
        cv2.putText(image, text, (x, y), cv2.FONT_HERSHEY_SIMPLEX, 1.0, (255, 255, 255), 2)
    return image


def choose_model():
    """
    –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏.
    """
    models_dir = "data/models"
    model_files = [f for f in os.listdir(models_dir) if f.endswith(".hef")]
    if not model_files:
        print("–õ–æ–≥: –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", models_dir)
        exit(1)
    print("\nüìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
    for i, model in enumerate(model_files):
        print(f"  {i + 1}. {model}")
    while True:
        try:
            choice = int(input("\nüëâ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏: ")) - 1
            if 0 <= choice < len(model_files):
                return os.path.join(models_dir, model_files[choice])
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")


# === 4. –ó–ê–ü–£–°–ö –ö–ê–ú–ï–† –ò –î–ï–¢–ï–ö–¶–ò–ò ===
model_path = choose_model()
inf = HailoInference(model_path)
proc = Processor(inf, conf=0.5)
stereo = StereoCameraSystem()
stereo.start()

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–∫—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–¥–∏–Ω —Ä–∞–∑ (–ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–∞–¥—Ä–µ)
rect_params_computed = False
R1 = R2 = P1 = P2 = None

print("üé• –ó–∞–ø—É—Å–∫ —Å—Ç–µ—Ä–µ–æ–ø–æ—Ç–æ–∫–∞. –ù–∞–∂–º–∏—Ç–µ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
try:
    while True:
        frame_left, frame_right = stereo.get_synchronized_frames()
        if frame_left is not None and frame_right is not None:
            if not rect_params_computed:
                h, w = frame_left.shape[:2]
                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∫—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç—Ä–∏—Ü—ã –¥–ª—è –∫–∞–º–µ—Ä
                R1, R2, P1, P2, Q, roi1, roi2 = cv2.stereoRectify(
                    mtxL, distL, mtxR, distR, (w, h), R, T, flags=cv2.CALIB_ZERO_DISPARITY
                )
                rect_params_computed = True

            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –æ–±–æ–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
            detections = proc.process([frame_left, frame_right])
            result_left = filter_people(detections[0])
            result_right = filter_people(detections[1])

            if not result_left['absolute_boxes']:
                print("–õ–æ–≥: –í –ª–µ–≤–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ –º–∞—à–∏–Ω—ã.")
            if not result_right['absolute_boxes']:
                print("–õ–æ–≥: –í –ø—Ä–∞–≤–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ –º–∞—à–∏–Ω—ã.")

            # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º bbox –º–µ–∂–¥—É –ª–µ–≤—ã–º –∏ –ø—Ä–∞–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            matches = match_boxes(result_left, result_right)

            # –í—ã—á–∏—Å–ª—è–µ–º –≥–ª—É–±–∏–Ω—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∫—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ü–µ–Ω—Ç—Ä–∞ bbox
            depth_results = compute_depth_rectified(result_left, result_right, matches, R1, R2, P1, P2)

            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ bounding boxes –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–ª—É–±–∏–Ω–µ –Ω–∞ –ª–µ–≤–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            processed_left = draw_boxes(frame_left, result_left)
            processed_left = draw_depth(processed_left, depth_results)

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ª–µ–≤—ã–π –∏ –ø—Ä–∞–≤—ã–π –∫–∞–¥—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            combined = cv2.hconcat([processed_left, frame_right])
            cv2.namedWindow("Stereo Depth", cv2.WINDOW_NORMAL)
            cv2.resizeWindow("Stereo Depth", 1920, 1080)
            cv2.imshow("Stereo Depth", combined)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
except KeyboardInterrupt:
    print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞...")

stereo.stop()
cv2.destroyAllWindows()
print("‚úÖ –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω.")
