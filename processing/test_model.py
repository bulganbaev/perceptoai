import cv2
import os
import numpy as np
from cam.camera_driver import StereoCameraSystem
from processing.hailo_detection import HailoInference, Processor


def choose_model():
    """
    –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏.
    """
    models_dir = "data/models"
    model_files = [f for f in os.listdir(models_dir) if f.endswith(".hef")]

    if not model_files:
        print("–õ–æ–≥: –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", models_dir)
        exit(1)

    print("\nüìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
    for i, model in enumerate(model_files):
        print(f"  {i + 1}. {model}")

    while True:
        try:
            choice = int(input("\nüëâ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏: ")) - 1
            if 0 <= choice < len(model_files):
                return os.path.join(models_dir, model_files[choice])
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")


# === 1. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
model_path = choose_model()
inf = HailoInference(model_path)
proc = Processor(inf, conf=0.5)
stereo = StereoCameraSystem()
stereo.start()

print("üé• –ó–∞–ø—É—Å–∫ —Å—Ç–µ—Ä–µ–æ–ø–æ—Ç–æ–∫–∞. –ù–∞–∂–º–∏—Ç–µ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")

try:
    while True:
        frame_left, frame_right = stereo.get_synchronized_frames()

        if frame_left is not None and frame_right is not None:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –æ–±—ä–µ–∫—Ç–æ–≤
            segmentations = proc.process([frame_left, frame_right])

            # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å–∫–∏ –¥–ª—è –ª–µ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            left_masks = segmentations[0].get('absolute_masks', [])

            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –º–∞—Å–∫—É –¥–ª—è –ø—Ä–∞–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            left_mask_overlay = np.zeros_like(frame_left)

            # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –º–∞—Å–∫–∏ —Å –ª–µ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –ø—Ä–∞–≤–æ–µ
            for mask in left_masks:
                left_mask_overlay[:, :, 2] = mask * 255  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–∏–Ω–∏–π –∫–∞–Ω–∞–ª

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∞–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–∞–ª–æ–∂–µ–Ω–Ω–æ–π –º–∞—Å–∫–æ–π
            left_blended = cv2.addWeighted(frame_left, 0.7, left_masks, 0.3, 0)

            # –ö–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º –ª–µ–≤—É—é –∏ –ø—Ä–∞–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–ª–µ–≤–∞—è —Å–ª–µ–≤–∞, –ø—Ä–∞–≤–∞—è —Å–ø—Ä–∞–≤–∞)
            # combined = np.hstack((left_blended, right_blended))

            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ Full HD (1920x1080)
            combined_resized = cv2.resize(left_blended, (1920, 1080))

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            cv2.imshow("Stereo Segmentation", combined_resized)

        # –í—ã—Ö–æ–¥ –ø–æ –∫–ª–∞–≤–∏—à–µ 'q'
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

except KeyboardInterrupt:
    print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞...")

# === –û–ß–ò–°–¢–ö–ê –†–ï–°–£–†–°–û–í ===
stereo.stop()
cv2.destroyAllWindows()
print("‚úÖ –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω.")
