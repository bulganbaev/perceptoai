import cv2
import numpy as np
import glob

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏
CHESSBOARD_SIZE = (10, 7)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–≥–ª–æ–≤
SQUARE_SIZE = 25  # –†–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –≤ –º–º

# –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–æ—á–µ–∫
objp = np.zeros((CHESSBOARD_SIZE[0] * CHESSBOARD_SIZE[1], 3), np.float32)
objp[:, :2] = np.mgrid[0:CHESSBOARD_SIZE[0], 0:CHESSBOARD_SIZE[1]].T.reshape(-1, 2) * SQUARE_SIZE

# –°–ø–∏—Å–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—á–µ–∫
objpoints = []  # 3D —Ç–æ—á–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –º–∏—Ä–µ
imgpoints_left = []  # 2D —Ç–æ—á–∫–∏ –¥–ª—è –ª–µ–≤–æ–π –∫–∞–º–µ—Ä—ã
imgpoints_right = []  # 2D —Ç–æ—á–∫–∏ –¥–ª—è –ø—Ä–∞–≤–æ–π –∫–∞–º–µ—Ä—ã

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
left_images = sorted(glob.glob("../data/images/left/*.jpg"))
right_images = sorted(glob.glob("../data/images/right/*.jpg"))

assert len(left_images) == len(right_images), "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å!"
print(f"üì∏ –ù–∞–π–¥–µ–Ω–æ {len(left_images)} –ø–∞—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏")

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
for i, (left_img, right_img) in enumerate(zip(left_images, right_images)):
    imgL = cv2.imread(left_img)
    imgR = cv2.imread(right_img)
    grayL = cv2.cvtColor(imgL, cv2.COLOR_BGR2GRAY)
    grayR = cv2.cvtColor(imgR, cv2.COLOR_BGR2GRAY)

    # –ò—â–µ–º —à–∞—Ö–º–∞—Ç–Ω—É—é –¥–æ—Å–∫—É
    retL, cornersL = cv2.findChessboardCorners(grayL, CHESSBOARD_SIZE, None)
    retR, cornersR = cv2.findChessboardCorners(grayR, CHESSBOARD_SIZE, None)

    if retL and retR:
        objpoints.append(objp)
        imgpoints_left.append(cornersL)
        imgpoints_right.append(cornersR)
        print(f"‚úÖ [{i+1}/{len(left_images)}] –®–∞—Ö–º–∞—Ç–Ω–∞—è –¥–æ—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –æ–±–æ–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö")
    else:
        print(f"‚ùå [{i+1}/{len(left_images)}] –®–∞—Ö–º–∞—Ç–Ω–∞—è –¥–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")

# –ö–∞–ª–∏–±—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–∞–º–µ—Ä—É –æ—Ç–¥–µ–ª—å–Ω–æ
print("üìè –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ª–µ–≤–æ–π –∫–∞–º–µ—Ä—ã...")
retL, mtxL, distL, rvecsL, tvecsL = cv2.calibrateCamera(objpoints, imgpoints_left, grayL.shape[::-1], None, None)
print(f"üéØ –õ—É—á—à–∞—è —Å—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ RMSE –¥–ª—è –ª–µ–≤–æ–π –∫–∞–º–µ—Ä—ã: {retL:.6f}")

print("üìè –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø—Ä–∞–≤–æ–π –∫–∞–º–µ—Ä—ã...")
retR, mtxR, distR, rvecsR, tvecsR = cv2.calibrateCamera(objpoints, imgpoints_right, grayR.shape[::-1], None, None)
print(f"üéØ –õ—É—á—à–∞—è —Å—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ RMSE –¥–ª—è –ø—Ä–∞–≤–æ–π –∫–∞–º–µ—Ä—ã: {retR:.6f}")

# –°—Ç–µ—Ä–µ–æ-–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ (–ø–æ–∏—Å–∫ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä)
print("üîÑ –ó–∞–ø—É—Å–∫ —Å—Ç–µ—Ä–µ–æ-–∫–∞–ª–∏–±—Ä–æ–≤–∫–∏...")
(retS, mtxL, distL, mtxR, distR, R, T, E, F) = cv2.stereoCalibrate(
    objpoints, imgpoints_left, imgpoints_right,
    mtxL, distL, mtxR, distR, grayL.shape[::-1],
    criteria=(cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 1e-5),
    flags=cv2.CALIB_FIX_INTRINSIC
)
print(f"üîç –°—Ç–µ—Ä–µ–æ-–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ RMSE: {retS:.6f}")

# –í—ã—á–∏—Å–ª—è–µ–º baseline
baseline = np.linalg.norm(T)
print(f"üìè Baseline (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–∞–º–µ—Ä–∞–º–∏): {baseline:.2f} –º–º")

# –í—ã–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
print("üåÄ –ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞ (R):\n", R)
print("üöÄ –í–µ–∫—Ç–æ—Ä —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ (T):\n", T)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
np.savez("data/calibration/calibration_data.npz", mtxL=mtxL, distL=distL, mtxR=mtxR, distR=distR, R=R, T=T)
print("‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ calibration_data.npz")
